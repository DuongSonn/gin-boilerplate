// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"oauth-server/app/entity"
	"oauth-server/graphql/model"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/google/uuid"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

type OAuthResolver interface {
	Platform(ctx context.Context, obj *entity.OAuth) (model.OAuthPlatform, error)

	Status(ctx context.Context, obj *entity.OAuth) (model.OAuthStatus, error)
	ExpireAt(ctx context.Context, obj *entity.OAuth) (*time.Time, error)
	CreatedAt(ctx context.Context, obj *entity.OAuth) (*time.Time, error)
	UpdatedAt(ctx context.Context, obj *entity.OAuth) (*time.Time, error)
	LoginAt(ctx context.Context, obj *entity.OAuth) (*time.Time, error)
	User(ctx context.Context, obj *entity.OAuth) (*entity.User, error)
}

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_OAuthMutation_create_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_OAuthMutation_create_argsInput(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["input"] = arg0
	return args, nil
}
func (ec *executionContext) field_OAuthMutation_create_argsInput(
	ctx context.Context,
	rawArgs map[string]any,
) (model.CreateOAuthInput, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
	if tmp, ok := rawArgs["input"]; ok {
		return ec.unmarshalNCreateOAuthInput2oauthᚑserverᚋgraphqlᚋmodelᚐCreateOAuthInput(ctx, tmp)
	}

	var zeroVal model.CreateOAuthInput
	return zeroVal, nil
}

func (ec *executionContext) field_OAuthMutation_revoke_all_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_OAuthMutation_revoke_all_argsUserID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["user_id"] = arg0
	return args, nil
}
func (ec *executionContext) field_OAuthMutation_revoke_all_argsUserID(
	ctx context.Context,
	rawArgs map[string]any,
) (uuid.UUID, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
	if tmp, ok := rawArgs["user_id"]; ok {
		return ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
	}

	var zeroVal uuid.UUID
	return zeroVal, nil
}

func (ec *executionContext) field_OAuthMutation_revoke_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_OAuthMutation_revoke_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_OAuthMutation_revoke_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uuid.UUID, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
	}

	var zeroVal uuid.UUID
	return zeroVal, nil
}

func (ec *executionContext) field_OAuthMutation_update_status_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_OAuthMutation_update_status_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	arg1, err := ec.field_OAuthMutation_update_status_argsStatus(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["status"] = arg1
	return args, nil
}
func (ec *executionContext) field_OAuthMutation_update_status_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uuid.UUID, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
	}

	var zeroVal uuid.UUID
	return zeroVal, nil
}

func (ec *executionContext) field_OAuthMutation_update_status_argsStatus(
	ctx context.Context,
	rawArgs map[string]any,
) (model.OAuthStatus, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
	if tmp, ok := rawArgs["status"]; ok {
		return ec.unmarshalNOAuthStatus2oauthᚑserverᚋgraphqlᚋmodelᚐOAuthStatus(ctx, tmp)
	}

	var zeroVal model.OAuthStatus
	return zeroVal, nil
}

func (ec *executionContext) field_OAuthQuery_active_list_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_OAuthQuery_active_list_argsUserID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["user_id"] = arg0
	return args, nil
}
func (ec *executionContext) field_OAuthQuery_active_list_argsUserID(
	ctx context.Context,
	rawArgs map[string]any,
) (uuid.UUID, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
	if tmp, ok := rawArgs["user_id"]; ok {
		return ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
	}

	var zeroVal uuid.UUID
	return zeroVal, nil
}

func (ec *executionContext) field_OAuthQuery_get_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_OAuthQuery_get_argsID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["id"] = arg0
	return args, nil
}
func (ec *executionContext) field_OAuthQuery_get_argsID(
	ctx context.Context,
	rawArgs map[string]any,
) (uuid.UUID, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
	if tmp, ok := rawArgs["id"]; ok {
		return ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
	}

	var zeroVal uuid.UUID
	return zeroVal, nil
}

func (ec *executionContext) field_OAuthQuery_list_args(ctx context.Context, rawArgs map[string]any) (map[string]any, error) {
	var err error
	args := map[string]any{}
	arg0, err := ec.field_OAuthQuery_list_argsLimit(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["limit"] = arg0
	arg1, err := ec.field_OAuthQuery_list_argsOffset(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["offset"] = arg1
	arg2, err := ec.field_OAuthQuery_list_argsUserID(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["user_id"] = arg2
	arg3, err := ec.field_OAuthQuery_list_argsPlatform(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["platform"] = arg3
	arg4, err := ec.field_OAuthQuery_list_argsStatus(ctx, rawArgs)
	if err != nil {
		return nil, err
	}
	args["status"] = arg4
	return args, nil
}
func (ec *executionContext) field_OAuthQuery_list_argsLimit(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
	if tmp, ok := rawArgs["limit"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_OAuthQuery_list_argsOffset(
	ctx context.Context,
	rawArgs map[string]any,
) (*int32, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
	if tmp, ok := rawArgs["offset"]; ok {
		return ec.unmarshalOInt2ᚖint32(ctx, tmp)
	}

	var zeroVal *int32
	return zeroVal, nil
}

func (ec *executionContext) field_OAuthQuery_list_argsUserID(
	ctx context.Context,
	rawArgs map[string]any,
) (*uuid.UUID, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
	if tmp, ok := rawArgs["user_id"]; ok {
		return ec.unmarshalOUUID2ᚖgithubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, tmp)
	}

	var zeroVal *uuid.UUID
	return zeroVal, nil
}

func (ec *executionContext) field_OAuthQuery_list_argsPlatform(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.OAuthPlatform, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("platform"))
	if tmp, ok := rawArgs["platform"]; ok {
		return ec.unmarshalOOAuthPlatform2ᚖoauthᚑserverᚋgraphqlᚋmodelᚐOAuthPlatform(ctx, tmp)
	}

	var zeroVal *model.OAuthPlatform
	return zeroVal, nil
}

func (ec *executionContext) field_OAuthQuery_list_argsStatus(
	ctx context.Context,
	rawArgs map[string]any,
) (*model.OAuthStatus, error) {
	ctx = graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
	if tmp, ok := rawArgs["status"]; ok {
		return ec.unmarshalOOAuthStatus2ᚖoauthᚑserverᚋgraphqlᚋmodelᚐOAuthStatus(ctx, tmp)
	}

	var zeroVal *model.OAuthStatus
	return zeroVal, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _OAuth_id(ctx context.Context, field graphql.CollectedField, obj *entity.OAuth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OAuth_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OAuth_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OAuth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OAuth_user_id(ctx context.Context, field graphql.CollectedField, obj *entity.OAuth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OAuth_user_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OAuth_user_id(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OAuth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type UUID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OAuth_ip(ctx context.Context, field graphql.CollectedField, obj *entity.OAuth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OAuth_ip(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OAuth_ip(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OAuth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OAuth_platform(ctx context.Context, field graphql.CollectedField, obj *entity.OAuth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OAuth_platform(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OAuth().Platform(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.OAuthPlatform)
	fc.Result = res
	return ec.marshalNOAuthPlatform2oauthᚑserverᚋgraphqlᚋmodelᚐOAuthPlatform(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OAuth_platform(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OAuth",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type OAuthPlatform does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OAuth_token(ctx context.Context, field graphql.CollectedField, obj *entity.OAuth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OAuth_token(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Token, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OAuth_token(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OAuth",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OAuth_status(ctx context.Context, field graphql.CollectedField, obj *entity.OAuth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OAuth_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OAuth().Status(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.OAuthStatus)
	fc.Result = res
	return ec.marshalNOAuthStatus2oauthᚑserverᚋgraphqlᚋmodelᚐOAuthStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OAuth_status(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OAuth",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type OAuthStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OAuth_expire_at(ctx context.Context, field graphql.CollectedField, obj *entity.OAuth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OAuth_expire_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OAuth().ExpireAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalNTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OAuth_expire_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OAuth",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OAuth_created_at(ctx context.Context, field graphql.CollectedField, obj *entity.OAuth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OAuth_created_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OAuth().CreatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalNTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OAuth_created_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OAuth",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OAuth_updated_at(ctx context.Context, field graphql.CollectedField, obj *entity.OAuth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OAuth_updated_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OAuth().UpdatedAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalNTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OAuth_updated_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OAuth",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OAuth_login_at(ctx context.Context, field graphql.CollectedField, obj *entity.OAuth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OAuth_login_at(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OAuth().LoginAt(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OAuth_login_at(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OAuth",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OAuth_user(ctx context.Context, field graphql.CollectedField, obj *entity.OAuth) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OAuth_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.OAuth().User(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*entity.User)
	fc.Result = res
	return ec.marshalNUser2ᚖoauthᚑserverᚋappᚋentityᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OAuth_user(_ context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OAuth",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "phone_number":
				return ec.fieldContext_User_phone_number(ctx, field)
			case "password":
				return ec.fieldContext_User_password(ctx, field)
			case "is_active":
				return ec.fieldContext_User_is_active(ctx, field)
			case "created_at":
				return ec.fieldContext_User_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_User_updated_at(ctx, field)
			case "o_auths":
				return ec.fieldContext_User_o_auths(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _OAuthMutation_create(ctx context.Context, field graphql.CollectedField, obj *model.OAuthMutation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OAuthMutation_create(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Create, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*entity.OAuth)
	fc.Result = res
	return ec.marshalNOAuth2ᚖoauthᚑserverᚋappᚋentityᚐOAuth(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OAuthMutation_create(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OAuthMutation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OAuth_id(ctx, field)
			case "user_id":
				return ec.fieldContext_OAuth_user_id(ctx, field)
			case "ip":
				return ec.fieldContext_OAuth_ip(ctx, field)
			case "platform":
				return ec.fieldContext_OAuth_platform(ctx, field)
			case "token":
				return ec.fieldContext_OAuth_token(ctx, field)
			case "status":
				return ec.fieldContext_OAuth_status(ctx, field)
			case "expire_at":
				return ec.fieldContext_OAuth_expire_at(ctx, field)
			case "created_at":
				return ec.fieldContext_OAuth_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_OAuth_updated_at(ctx, field)
			case "login_at":
				return ec.fieldContext_OAuth_login_at(ctx, field)
			case "user":
				return ec.fieldContext_OAuth_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OAuth", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_OAuthMutation_create_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _OAuthMutation_update_status(ctx context.Context, field graphql.CollectedField, obj *model.OAuthMutation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OAuthMutation_update_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*entity.OAuth)
	fc.Result = res
	return ec.marshalNOAuth2ᚖoauthᚑserverᚋappᚋentityᚐOAuth(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OAuthMutation_update_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OAuthMutation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OAuth_id(ctx, field)
			case "user_id":
				return ec.fieldContext_OAuth_user_id(ctx, field)
			case "ip":
				return ec.fieldContext_OAuth_ip(ctx, field)
			case "platform":
				return ec.fieldContext_OAuth_platform(ctx, field)
			case "token":
				return ec.fieldContext_OAuth_token(ctx, field)
			case "status":
				return ec.fieldContext_OAuth_status(ctx, field)
			case "expire_at":
				return ec.fieldContext_OAuth_expire_at(ctx, field)
			case "created_at":
				return ec.fieldContext_OAuth_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_OAuth_updated_at(ctx, field)
			case "login_at":
				return ec.fieldContext_OAuth_login_at(ctx, field)
			case "user":
				return ec.fieldContext_OAuth_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OAuth", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_OAuthMutation_update_status_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _OAuthMutation_revoke(ctx context.Context, field graphql.CollectedField, obj *model.OAuthMutation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OAuthMutation_revoke(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Revoke, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OAuthMutation_revoke(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OAuthMutation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_OAuthMutation_revoke_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _OAuthMutation_revoke_all(ctx context.Context, field graphql.CollectedField, obj *model.OAuthMutation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OAuthMutation_revoke_all(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RevokeAll, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OAuthMutation_revoke_all(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OAuthMutation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_OAuthMutation_revoke_all_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _OAuthQuery_list(ctx context.Context, field graphql.CollectedField, obj *model.OAuthQuery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OAuthQuery_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.List, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*entity.OAuth)
	fc.Result = res
	return ec.marshalNOAuth2ᚕᚖoauthᚑserverᚋappᚋentityᚐOAuthᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OAuthQuery_list(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OAuthQuery",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OAuth_id(ctx, field)
			case "user_id":
				return ec.fieldContext_OAuth_user_id(ctx, field)
			case "ip":
				return ec.fieldContext_OAuth_ip(ctx, field)
			case "platform":
				return ec.fieldContext_OAuth_platform(ctx, field)
			case "token":
				return ec.fieldContext_OAuth_token(ctx, field)
			case "status":
				return ec.fieldContext_OAuth_status(ctx, field)
			case "expire_at":
				return ec.fieldContext_OAuth_expire_at(ctx, field)
			case "created_at":
				return ec.fieldContext_OAuth_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_OAuth_updated_at(ctx, field)
			case "login_at":
				return ec.fieldContext_OAuth_login_at(ctx, field)
			case "user":
				return ec.fieldContext_OAuth_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OAuth", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_OAuthQuery_list_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _OAuthQuery_get(ctx context.Context, field graphql.CollectedField, obj *model.OAuthQuery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OAuthQuery_get(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Get, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*entity.OAuth)
	fc.Result = res
	return ec.marshalOOAuth2ᚖoauthᚑserverᚋappᚋentityᚐOAuth(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OAuthQuery_get(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OAuthQuery",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OAuth_id(ctx, field)
			case "user_id":
				return ec.fieldContext_OAuth_user_id(ctx, field)
			case "ip":
				return ec.fieldContext_OAuth_ip(ctx, field)
			case "platform":
				return ec.fieldContext_OAuth_platform(ctx, field)
			case "token":
				return ec.fieldContext_OAuth_token(ctx, field)
			case "status":
				return ec.fieldContext_OAuth_status(ctx, field)
			case "expire_at":
				return ec.fieldContext_OAuth_expire_at(ctx, field)
			case "created_at":
				return ec.fieldContext_OAuth_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_OAuth_updated_at(ctx, field)
			case "login_at":
				return ec.fieldContext_OAuth_login_at(ctx, field)
			case "user":
				return ec.fieldContext_OAuth_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OAuth", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_OAuthQuery_get_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

func (ec *executionContext) _OAuthQuery_active_list(ctx context.Context, field graphql.CollectedField, obj *model.OAuthQuery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OAuthQuery_active_list(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (any, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActiveList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*entity.OAuth)
	fc.Result = res
	return ec.marshalNOAuth2ᚕᚖoauthᚑserverᚋappᚋentityᚐOAuthᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OAuthQuery_active_list(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OAuthQuery",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OAuth_id(ctx, field)
			case "user_id":
				return ec.fieldContext_OAuth_user_id(ctx, field)
			case "ip":
				return ec.fieldContext_OAuth_ip(ctx, field)
			case "platform":
				return ec.fieldContext_OAuth_platform(ctx, field)
			case "token":
				return ec.fieldContext_OAuth_token(ctx, field)
			case "status":
				return ec.fieldContext_OAuth_status(ctx, field)
			case "expire_at":
				return ec.fieldContext_OAuth_expire_at(ctx, field)
			case "created_at":
				return ec.fieldContext_OAuth_created_at(ctx, field)
			case "updated_at":
				return ec.fieldContext_OAuth_updated_at(ctx, field)
			case "login_at":
				return ec.fieldContext_OAuth_login_at(ctx, field)
			case "user":
				return ec.fieldContext_OAuth_user(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OAuth", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_OAuthQuery_active_list_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return fc, err
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputCreateOAuthInput(ctx context.Context, obj any) (model.CreateOAuthInput, error) {
	var it model.CreateOAuthInput
	asMap := map[string]any{}
	for k, v := range obj.(map[string]any) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"user_id", "ip", "platform", "token", "expire_at"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "user_id":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user_id"))
			data, err := ec.unmarshalNUUID2githubᚗcomᚋgoogleᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
			it.UserID = data
		case "ip":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ip"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.IP = data
		case "platform":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("platform"))
			data, err := ec.unmarshalNOAuthPlatform2oauthᚑserverᚋgraphqlᚋmodelᚐOAuthPlatform(ctx, v)
			if err != nil {
				return it, err
			}
			it.Platform = data
		case "token":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
			data, err := ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
			it.Token = data
		case "expire_at":
			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expire_at"))
			data, err := ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
			it.ExpireAt = data
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var oAuthImplementors = []string{"OAuth"}

func (ec *executionContext) _OAuth(ctx context.Context, sel ast.SelectionSet, obj *entity.OAuth) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, oAuthImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OAuth")
		case "id":
			out.Values[i] = ec._OAuth_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "user_id":
			out.Values[i] = ec._OAuth_user_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "ip":
			out.Values[i] = ec._OAuth_ip(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "platform":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OAuth_platform(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "token":
			out.Values[i] = ec._OAuth_token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&out.Invalids, 1)
			}
		case "status":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OAuth_status(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "expire_at":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OAuth_expire_at(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "created_at":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OAuth_created_at(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "updated_at":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OAuth_updated_at(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "login_at":
			field := field

			innerFunc := func(ctx context.Context, _ *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OAuth_login_at(ctx, field, obj)
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		case "user":
			field := field

			innerFunc := func(ctx context.Context, fs *graphql.FieldSet) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._OAuth_user(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&fs.Invalids, 1)
				}
				return res
			}

			if field.Deferrable != nil {
				dfs, ok := deferred[field.Deferrable.Label]
				di := 0
				if ok {
					dfs.AddField(field)
					di = len(dfs.Values) - 1
				} else {
					dfs = graphql.NewFieldSet([]graphql.CollectedField{field})
					deferred[field.Deferrable.Label] = dfs
				}
				dfs.Concurrently(di, func(ctx context.Context) graphql.Marshaler {
					return innerFunc(ctx, dfs)
				})

				// don't run the out.Concurrently() call below
				out.Values[i] = graphql.Null
				continue
			}

			out.Concurrently(i, func(ctx context.Context) graphql.Marshaler { return innerFunc(ctx, out) })
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var oAuthMutationImplementors = []string{"OAuthMutation"}

func (ec *executionContext) _OAuthMutation(ctx context.Context, sel ast.SelectionSet, obj *model.OAuthMutation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, oAuthMutationImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OAuthMutation")
		case "create":
			out.Values[i] = ec._OAuthMutation_create(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "update_status":
			out.Values[i] = ec._OAuthMutation_update_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "revoke":
			out.Values[i] = ec._OAuthMutation_revoke(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "revoke_all":
			out.Values[i] = ec._OAuthMutation_revoke_all(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

var oAuthQueryImplementors = []string{"OAuthQuery"}

func (ec *executionContext) _OAuthQuery(ctx context.Context, sel ast.SelectionSet, obj *model.OAuthQuery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, oAuthQueryImplementors)

	out := graphql.NewFieldSet(fields)
	deferred := make(map[string]*graphql.FieldSet)
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OAuthQuery")
		case "list":
			out.Values[i] = ec._OAuthQuery_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		case "get":
			out.Values[i] = ec._OAuthQuery_get(ctx, field, obj)
		case "active_list":
			out.Values[i] = ec._OAuthQuery_active_list(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				out.Invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch(ctx)
	if out.Invalids > 0 {
		return graphql.Null
	}

	atomic.AddInt32(&ec.deferred, int32(len(deferred)))

	for label, dfs := range deferred {
		ec.processDeferredGroup(graphql.DeferredGroup{
			Label:    label,
			Path:     graphql.GetPath(ctx),
			FieldSet: dfs,
			Context:  ctx,
		})
	}

	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNCreateOAuthInput2oauthᚑserverᚋgraphqlᚋmodelᚐCreateOAuthInput(ctx context.Context, v any) (model.CreateOAuthInput, error) {
	res, err := ec.unmarshalInputCreateOAuthInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOAuth2ᚕᚖoauthᚑserverᚋappᚋentityᚐOAuthᚄ(ctx context.Context, sel ast.SelectionSet, v []*entity.OAuth) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOAuth2ᚖoauthᚑserverᚋappᚋentityᚐOAuth(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNOAuth2ᚖoauthᚑserverᚋappᚋentityᚐOAuth(ctx context.Context, sel ast.SelectionSet, v *entity.OAuth) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._OAuth(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOAuthPlatform2oauthᚑserverᚋgraphqlᚋmodelᚐOAuthPlatform(ctx context.Context, v any) (model.OAuthPlatform, error) {
	var res model.OAuthPlatform
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOAuthPlatform2oauthᚑserverᚋgraphqlᚋmodelᚐOAuthPlatform(ctx context.Context, sel ast.SelectionSet, v model.OAuthPlatform) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNOAuthStatus2oauthᚑserverᚋgraphqlᚋmodelᚐOAuthStatus(ctx context.Context, v any) (model.OAuthStatus, error) {
	var res model.OAuthStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOAuthStatus2oauthᚑserverᚋgraphqlᚋmodelᚐOAuthStatus(ctx context.Context, sel ast.SelectionSet, v model.OAuthStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalOOAuth2ᚕᚖoauthᚑserverᚋappᚋentityᚐOAuthᚄ(ctx context.Context, sel ast.SelectionSet, v []*entity.OAuth) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOAuth2ᚖoauthᚑserverᚋappᚋentityᚐOAuth(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOOAuth2ᚖoauthᚑserverᚋappᚋentityᚐOAuth(ctx context.Context, sel ast.SelectionSet, v *entity.OAuth) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OAuth(ctx, sel, v)
}

func (ec *executionContext) marshalOOAuthMutation2ᚖoauthᚑserverᚋgraphqlᚋmodelᚐOAuthMutation(ctx context.Context, sel ast.SelectionSet, v *model.OAuthMutation) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OAuthMutation(ctx, sel, v)
}

func (ec *executionContext) unmarshalOOAuthPlatform2ᚖoauthᚑserverᚋgraphqlᚋmodelᚐOAuthPlatform(ctx context.Context, v any) (*model.OAuthPlatform, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.OAuthPlatform)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOAuthPlatform2ᚖoauthᚑserverᚋgraphqlᚋmodelᚐOAuthPlatform(ctx context.Context, sel ast.SelectionSet, v *model.OAuthPlatform) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOOAuthQuery2ᚖoauthᚑserverᚋgraphqlᚋmodelᚐOAuthQuery(ctx context.Context, sel ast.SelectionSet, v *model.OAuthQuery) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OAuthQuery(ctx, sel, v)
}

func (ec *executionContext) unmarshalOOAuthStatus2ᚖoauthᚑserverᚋgraphqlᚋmodelᚐOAuthStatus(ctx context.Context, v any) (*model.OAuthStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.OAuthStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOAuthStatus2ᚖoauthᚑserverᚋgraphqlᚋmodelᚐOAuthStatus(ctx context.Context, sel ast.SelectionSet, v *model.OAuthStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

// endregion ***************************** type.gotpl *****************************
