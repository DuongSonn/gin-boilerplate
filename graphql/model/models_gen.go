// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"github.com/google/uuid"
)

type Mutation struct {
}

type NewUser struct {
	Password        string  `json:"password"`
	ConfirmPassword string  `json:"confirmPassword"`
	Email           *string `json:"email,omitempty"`
	PhoneNumber     *string `json:"phoneNumber,omitempty"`
}

type OAuth struct {
	ID       uuid.UUID     `json:"id"`
	IP       string        `json:"ip"`
	Platform OAuthPlatform `json:"platform"`
	Token    string        `json:"token"`
	Status   OAuthStatus   `json:"status"`
	ExpireAt int           `json:"expireAt"`
}

type Query struct {
}

type User struct {
	ID          uuid.UUID `json:"id"`
	PhoneNumber *string   `json:"phoneNumber,omitempty"`
	Email       *string   `json:"email,omitempty"`
	IsActive    bool      `json:"isActive"`
	OAuth       *OAuth    `json:"oAuth,omitempty"`
}

type OAuthPlatform string

const (
	OAuthPlatformWeb    OAuthPlatform = "WEB"
	OAuthPlatformMobile OAuthPlatform = "MOBILE"
)

var AllOAuthPlatform = []OAuthPlatform{
	OAuthPlatformWeb,
	OAuthPlatformMobile,
}

func (e OAuthPlatform) IsValid() bool {
	switch e {
	case OAuthPlatformWeb, OAuthPlatformMobile:
		return true
	}
	return false
}

func (e OAuthPlatform) String() string {
	return string(e)
}

func (e *OAuthPlatform) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OAuthPlatform(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OAuthPlatform", str)
	}
	return nil
}

func (e OAuthPlatform) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OAuthStatus string

const (
	OAuthStatusActive   OAuthStatus = "ACTIVE"
	OAuthStatusInactive OAuthStatus = "INACTIVE"
	OAuthStatusBlocked  OAuthStatus = "BLOCKED"
)

var AllOAuthStatus = []OAuthStatus{
	OAuthStatusActive,
	OAuthStatusInactive,
	OAuthStatusBlocked,
}

func (e OAuthStatus) IsValid() bool {
	switch e {
	case OAuthStatusActive, OAuthStatusInactive, OAuthStatusBlocked:
		return true
	}
	return false
}

func (e OAuthStatus) String() string {
	return string(e)
}

func (e *OAuthStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OAuthStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OAuthStatus", str)
	}
	return nil
}

func (e OAuthStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
