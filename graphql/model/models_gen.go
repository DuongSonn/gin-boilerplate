// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"oauth-server/app/entity"
	"strconv"
	"time"

	"github.com/google/uuid"
)

type CreateOAuthInput struct {
	UserID   uuid.UUID     `json:"user_id"`
	IP       string        `json:"ip"`
	Platform OAuthPlatform `json:"platform"`
	Token    string        `json:"token"`
	ExpireAt time.Time     `json:"expire_at"`
}

type CreateUserInput struct {
	Email           *string `json:"email,omitempty"`
	PhoneNumber     *string `json:"phone_number,omitempty"`
	Password        string  `json:"password"`
	ConfirmPassword string  `json:"confirm_password"`
}

type Mutation struct {
}

type OAuthMutation struct {
	Create       *entity.OAuth `json:"create"`
	UpdateStatus *entity.OAuth `json:"update_status"`
	Revoke       bool          `json:"revoke"`
	RevokeAll    bool          `json:"revoke_all"`
}

type OAuthQuery struct {
	List       []*entity.OAuth `json:"list"`
	Get        *entity.OAuth   `json:"get,omitempty"`
	ActiveList []*entity.OAuth `json:"active_list"`
}

type Query struct {
}

type UpdatePasswordInput struct {
	CurrentPassword string `json:"current_password"`
	NewPassword     string `json:"new_password"`
	ConfirmPassword string `json:"confirm_password"`
}

type UpdateUserInput struct {
	Email       *string `json:"email,omitempty"`
	PhoneNumber *string `json:"phone_number,omitempty"`
	IsActive    *bool   `json:"is_active,omitempty"`
}

type UserMutation struct {
	Create         *entity.User `json:"create"`
	Update         *entity.User `json:"update"`
	UpdatePassword *entity.User `json:"update_password"`
	Delete         bool         `json:"delete"`
	ToggleActive   *entity.User `json:"toggle_active"`
}

type UserQuery struct {
	List []*entity.User `json:"list"`
	Get  *entity.User   `json:"get,omitempty"`
	Me   *entity.User   `json:"me"`
}

type OAuthPlatform string

const (
	OAuthPlatformMobile OAuthPlatform = "MOBILE"
	OAuthPlatformWeb    OAuthPlatform = "WEB"
)

var AllOAuthPlatform = []OAuthPlatform{
	OAuthPlatformMobile,
	OAuthPlatformWeb,
}

func (e OAuthPlatform) IsValid() bool {
	switch e {
	case OAuthPlatformMobile, OAuthPlatformWeb:
		return true
	}
	return false
}

func (e OAuthPlatform) String() string {
	return string(e)
}

func (e *OAuthPlatform) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OAuthPlatform(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OAuthPlatform", str)
	}
	return nil
}

func (e OAuthPlatform) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OAuthStatus string

const (
	OAuthStatusActive   OAuthStatus = "ACTIVE"
	OAuthStatusInactive OAuthStatus = "INACTIVE"
	OAuthStatusBlocked  OAuthStatus = "BLOCKED"
)

var AllOAuthStatus = []OAuthStatus{
	OAuthStatusActive,
	OAuthStatusInactive,
	OAuthStatusBlocked,
}

func (e OAuthStatus) IsValid() bool {
	switch e {
	case OAuthStatusActive, OAuthStatusInactive, OAuthStatusBlocked:
		return true
	}
	return false
}

func (e OAuthStatus) String() string {
	return string(e)
}

func (e *OAuthStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OAuthStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OAuthStatus", str)
	}
	return nil
}

func (e OAuthStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
