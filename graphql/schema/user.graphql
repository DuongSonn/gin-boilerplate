type User {
    id: UUID!
    email: String
    phone_number: String
    password: String!
    is_active: Boolean!
    created_at: Time!
    updated_at: Time!
    o_auths: [OAuth!]
}

type UserQuery {
    list(limit: Int, offset: Int, is_active: Boolean): [User!]!
    get(id: UUID!): User
    me: User!
}

type UserMutation {
    create(input: CreateUserInput!): User!
    update(id: UUID!, input: UpdateUserInput!): User!
    update_password(id: UUID!, input: UpdatePasswordInput!): User!
    delete(id: UUID!): Boolean!
    toggle_active(id: UUID!): User!
}

input CreateUserInput {
    email: String
    phone_number: String
    password: String!
    confirm_password: String!
}

input UpdateUserInput {
    email: String
    phone_number: String
    is_active: Boolean
}

input UpdatePasswordInput {
    current_password: String!
    new_password: String!
    confirm_password: String!
}
