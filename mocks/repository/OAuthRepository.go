// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "oauth-server/app/entity"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	repository "oauth-server/app/repository"
)

// OAuthRepository is an autogenerated mock type for the OAuthRepository type
type OAuthRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, tx, oauth
func (_m *OAuthRepository) Create(ctx context.Context, tx *gorm.DB, oauth *entity.Oauth) error {
	ret := _m.Called(ctx, tx, oauth)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.Oauth) error); ok {
		r0 = rf(ctx, tx, oauth)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindOneByFilter provides a mock function with given fields: ctx, tx, filter
func (_m *OAuthRepository) FindOneByFilter(ctx context.Context, tx *gorm.DB, filter *repository.FindOAuthByFilter) (*entity.Oauth, error) {
	ret := _m.Called(ctx, tx, filter)

	if len(ret) == 0 {
		panic("no return value specified for FindOneByFilter")
	}

	var r0 *entity.Oauth
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *repository.FindOAuthByFilter) (*entity.Oauth, error)); ok {
		return rf(ctx, tx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *repository.FindOAuthByFilter) *entity.Oauth); ok {
		r0 = rf(ctx, tx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Oauth)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, *repository.FindOAuthByFilter) error); ok {
		r1 = rf(ctx, tx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, tx, oauth
func (_m *OAuthRepository) Update(ctx context.Context, tx *gorm.DB, oauth *entity.Oauth) error {
	ret := _m.Called(ctx, tx, oauth)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.Oauth) error); ok {
		r0 = rf(ctx, tx, oauth)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOAuthRepository creates a new instance of OAuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OAuthRepository {
	mock := &OAuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
