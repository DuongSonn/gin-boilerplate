// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "oauth-server/app/entity"

	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	repository "oauth-server/app/repository"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// BulkCreate provides a mock function with given fields: ctx, tx, users
func (_m *UserRepository) BulkCreate(ctx context.Context, tx *gorm.DB, users []entity.User) error {
	ret := _m.Called(ctx, tx, users)

	if len(ret) == 0 {
		panic("no return value specified for BulkCreate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, []entity.User) error); ok {
		r0 = rf(ctx, tx, users)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, tx, user
func (_m *UserRepository) Create(ctx context.Context, tx *gorm.DB, user *entity.User) error {
	ret := _m.Called(ctx, tx, user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.User) error); ok {
		r0 = rf(ctx, tx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, tx, user
func (_m *UserRepository) Delete(ctx context.Context, tx *gorm.DB, user *entity.User) error {
	ret := _m.Called(ctx, tx, user)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.User) error); ok {
		r0 = rf(ctx, tx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindManyByFilter provides a mock function with given fields: ctx, tx, filer
func (_m *UserRepository) FindManyByFilter(ctx context.Context, tx *gorm.DB, filer *repository.FindUserByFilter) ([]entity.User, error) {
	ret := _m.Called(ctx, tx, filer)

	if len(ret) == 0 {
		panic("no return value specified for FindManyByFilter")
	}

	var r0 []entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *repository.FindUserByFilter) ([]entity.User, error)); ok {
		return rf(ctx, tx, filer)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *repository.FindUserByFilter) []entity.User); ok {
		r0 = rf(ctx, tx, filer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, *repository.FindUserByFilter) error); ok {
		r1 = rf(ctx, tx, filer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneByFilter provides a mock function with given fields: ctx, tx, filter
func (_m *UserRepository) FindOneByFilter(ctx context.Context, tx *gorm.DB, filter *repository.FindUserByFilter) (*entity.User, error) {
	ret := _m.Called(ctx, tx, filter)

	if len(ret) == 0 {
		panic("no return value specified for FindOneByFilter")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *repository.FindUserByFilter) (*entity.User, error)); ok {
		return rf(ctx, tx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *repository.FindUserByFilter) *entity.User); ok {
		r0 = rf(ctx, tx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, *repository.FindUserByFilter) error); ok {
		r1 = rf(ctx, tx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, tx, user
func (_m *UserRepository) Update(ctx context.Context, tx *gorm.DB, user *entity.User) error {
	ret := _m.Called(ctx, tx, user)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.User) error); ok {
		r0 = rf(ctx, tx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
